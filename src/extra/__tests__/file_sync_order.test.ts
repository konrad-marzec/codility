import { solution } from "../file_sync_order";

describe("file_sync_order", () => {
  describe("example test cases", () => {
    it.each`
      files                                                                                   | storageLimit | uploadSpeed | duration | expected
      ${[[20, 5], [10, 5], [3, 7]]}                                                           | ${100}       | ${1}        | ${4}     | ${[]}
      ${[[20, 5], [10, 5], [3, 7]]}                                                           | ${60}        | ${1}        | ${4}     | ${[]}
      ${[[10, 5]]}                                                                            | ${100}       | ${1}        | ${10}    | ${[]}
      ${[]}                                                                                   | ${100}       | ${1}        | ${10}    | ${[]}
      ${[[20, 5], [10, 5], [30, 7]]}                                                          | ${100}       | ${1}        | ${40}    | ${[1, 0]}
      ${[[10, 1], [20, 1], [30, 1]]}                                                          | ${60}        | ${2}        | ${31}    | ${[0, 1, 2]}
      ${[[20, 5], [10, 5], [30, 7]]}                                                          | ${60}        | ${1}        | ${40}    | ${[1, 0]}
      ${[[20, 5], [10, 5], [3, 7]]}                                                           | ${100}       | ${1}        | ${40}    | ${[1, 2, 0]}
      ${[[20, 5], [10, 5], [3, 101]]}                                                         | ${100}       | ${1}        | ${40}    | ${[1, 0]}
      ${[[20, 5], [10, 5], [3, 101]]}                                                         | ${100}       | ${1}        | ${40}    | ${[1, 0]}
      ${[[10, 5], [10, 5], [10, 5]]}                                                          | ${100}       | ${1}        | ${40}    | ${[0, 1, 2]}
      ${[[10, 1], [10, 5], [20, 50], [10, 60]]}                                               | ${1000}      | ${1}        | ${400}   | ${[0, 1, 2, 3]}
      ${[[10, 5], [10, 7], [8, 10], [2, 20]]}                                                 | ${20}        | ${2}        | ${100}   | ${[0, 2, 3]}
      ${[[1000, 1], [10, 5], [10, 5]]}                                                        | ${100}       | ${1}        | ${40}    | ${[1, 2]}
      ${[[1, 1], [10, 1], [5, 2]]}                                                            | ${30}        | ${10}       | ${40}    | ${[0, 1, 2]}
      ${[[10, 5], [8, 5], [9, 5], [5, 5], [20, 50], [10, 60]]}                                | ${1000}      | ${1}        | ${400}   | ${[3, 1, 2, 0, 4, 5]}
      ${[[10, 5], [8, 5], [9, 5], [5, 5], [30, 50], [25, 50], [20, 50], [10, 51], [10, 266]]} | ${1000}      | ${2}        | ${500}   | ${[3, 1, 2, 0, 6, 7, 5, 4, 8]}
    `(
      "returns '$expected' the length of  longest binary gap",
      ({ files, storageLimit, uploadSpeed, duration, expected }) => {
        expect(solution(files, storageLimit, uploadSpeed, duration)).toEqual(
          expected
        );
      }
    );
  });
});
